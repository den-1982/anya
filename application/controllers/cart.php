<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');class Cart extends CI_Controller {	public $data = array(		'canonical'=>'',		'h1'=>'',		'name'=>'',		'metadesc'=>'',		'metakey'=>'',		'title'=>'',		'text'=>'',		'spam'=>'',		'crumbs'=>array(),		'products_discount'=>array()	);////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// CONSTRUCT	public function __construct()	{		parent::__construct();				$this->load->helpers('functions');				$this->load->model(			array(				'client/settingsModel',				'client/clientModel',				'client/userModel',								'client/pageModel',				'client/categoryModel',				'client/productModel',				'client/filterModel',				'client/cartModel',				'client/partnershipModel',								'client/novaposhtaModel'			)		);				# Получить настройки		$this->data['settings'] = $this->settingsModel->getSettings();					# USER - данные о клиенте (если он авторизовался)		$this->data['user'] = $this->userModel->getUser();				# COLOR фильтр цветов		$this->data['filter_items_color'] = $this->filterModel->getFilterItemsColor();				# CART - корзина покупок		$this->data['cart'] = $this->cartModel->getCartHtml();	}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// __VIEW	private function _view($type = 'index', $data = array())	{		$this->load->view('client/parts/header.php', $data);		$this->load->view('client/'.$type.'.php', $data);		$this->load->view('client/parts/footer.php');	}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// __INFO	private function _info($obj = null, $default = '')	{		if ( ! $obj) $obj = new stdClass();		$this->data['h1']		= isset($obj->h1) ? $obj->h1 : $default;		$this->data['name']		= isset($obj->name) ? $obj->name : $default;		$this->data['title']	= isset($obj->title) ? $obj->title : $default;		$this->data['metadesc']	= isset($obj->metadesc) ? $obj->metadesc : $default;		$this->data['metakey']	= isset($obj->metakey) ? $obj->metakey : $default;		$this->data['text']		= isset($obj->text) ? $obj->text : '';		$this->data['spam']		= isset($obj->spam) ? $obj->spam : '';	}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// __CRUMBS	private function _crumbs($data = array(), $parent = 0)	{		static $j = 0;				$crumbs = array();		do{			$terac = false;			foreach ($data as  $item){				foreach ($item as $i){					if ($i->id == $parent){						$crumbs[] = array('id'=>$i->id, 'name'=>$i->name, '_url'=>$i->_url);						$parent = $i->parent;						$terac = true;						break;					}				}				}						# предохранитель (избегаем зацыкливания)			$j++;			if ($j > 100000)return;			# =====================================					}while ($terac);		return array_reverse($crumbs);	}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// CART	public function index()	{		$data = &$this->data;		$this->_info('', 'Корзина товаров');				# DISCOUNT CART проверка карточки клиента		if (isset($_POST['check_cart_discount'])){			$res = $this->userModel->checkCartDiscount($_POST['check_cart_discount']);			echo json_encode(isset($res->user_cart_percent) ? true : false);			exit;		}				# DELETE item - удаление товара AJAX		if (isset($_POST['del'])){			$this->cartModel->delItemCart($_POST['del']);			echo json_encode($this->cartModel->getCartHtml());			exit;		}				# DELETE item - удаление товара		if (isset($_GET['del'])){			$this->cartModel->delItemCart($_GET['del']);			redirect('/cart');			exit;		}				# UPDATE пересчитать корзину AJAX		if (isset($_POST['update_cart_ajax'])){			$this->cartModel->updateCart();			echo json_encode($this->cartModel->getCartHtml());			exit;		}				# UPDATE пересчитать корзину		if (isset($_POST['update_cart'])){			$this->cartModel->updateCart();			redirect('/cart');			exit;		}		# ОФОРМЛЕНИЕ ЗАКАЗА		if (isset($_POST['checkout'])){			$this->cartModel->checkout();			redirect('/cart');			exit;		}		# крошки		// $data['crumbs'] = array(			// array('id'=>0, 'name'=>'корзина', '_url'=>'cart')		// );				# выборка		$data['categories'] 	= $this->categoryModel->sortCategories($this->categoryModel->getCategories());		$data['pages'] 			= $this->pageModel->getPages();		$data['partnerships'] 	= $this->partnershipModel->getPartnerships();		$data['cityNP'] 		= $this->novaposhtaModel->getCitiesNovaPoshta();		$data['warenListNP']	= $data['user'] ? $this->novaposhtaModel->getWarenListNovaPoshta($data['user']->city) :array();				$this->output->set_header('Cache-control: no-store');		$this->_view('cart', $data);	}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// ADD		public function add()	{			# добавление товара в корзину		if (isset($_POST['add-cart'])){			$this->cartModel->addCart();			echo json_encode($this->cartModel->getCartHtml());			exit;		}				redirect('/cart');		return;	}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// 404	public function _404()	{			header("HTTP/1.0 404 Not Found");		$data = &$this->data;				$data['categories'] 		= $this->categoryModel->sortCategories($this->categoryModel->getCategories());		$data['pages'] 			= $this->pageModel->getPages();		$data['partnerships'] 	= $this->partnershipModel->getPartnerships();				$this->_view('404', $data);	}}